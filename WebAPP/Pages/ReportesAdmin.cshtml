@page
@model WebAPP.Pages.ReportesAdminModel
@{
    ViewData["Title"] = "Reportes";
    Layout = "~/Pages/Shared/AdminLayout.cshtml";
}

<div class="content">
    <h1>Reporte: Asesores que Más Generan</h1>

    <div class="chart-section">
        <canvas id="graficoAsesores"></canvas>
    </div>

    <div class="table-section">
        <h2>Totales por Asesor</h2>
        <table id="tablaTotales" class="table-report">
            <thead>
                <tr>
                    <th>ID Asesor</th>
                    <th>Nombre</th>
                    <th>Total Generado ($)</th>
                </tr>
            </thead>
            <tbody>
                <!-- Se llenará dinámicamente -->
            </tbody>
        </table>
    </div>
</div>

<style>
    body, html {
        background-color: black;
        color: white;
        margin: 0;
        padding: 0;
    }

    .content {
        padding: 30px;
        margin-left: 220px;
    }

    .chart-section, .table-section {
        background: #111;
        padding: 20px;
        border-radius: 15px;
        margin-top: 20px;
    }

    canvas {
        width: 100% !important;
        height: 400px !important;
    }

    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
        color: white;
    }

    th, td {
        border: 1px solid #333;
        padding: 10px;
        text-align: center;
    }

    th {
        background-color: #222;
    }
</style>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    document.addEventListener("DOMContentLoaded", async () => {
        const usuarioData = sessionStorage.getItem("usuario");

        if (!usuarioData) {
            Swal.fire({
                icon: "warning",
                title: "Tu sesión ha sido cerrada",
                text: "Para ingresar nuevamente por favor inicia sesión.",
                confirmButtonColor: "#8F5AF5",
                backdrop: `rgba(0, 0, 0, 0.95)`
            }).then(() => {
                window.location.href = "/Index";
            });
            return;
        }

        try {
            // 🔥 1. Cargar asesores
            const asesoresResponse = await fetch("https://localhost:7057/api/Asesor/RetrieveAll");
            const asesores = await asesoresResponse.json();

            // 🔥 2. Cargar totales generados
            const totalesResponse = await fetch("https://localhost:7057/api/TransaccionAsesor/ReporteTotalesPorAsesor");
            const totales = await totalesResponse.json();

            // 🔥 3. Combinar datos
            const datosCombinados = asesores.map(asesor => {
                const total = totales.find(t => t.idAsesor === asesor.id);
                return {
                    idAsesor: asesor.id,
                    nombre: `${asesor.nombre} ${asesor.primerApellido}`,
                    totalGenerado: total ? total.totalGenerado : 0
                };
            });

            // 🔥 4. Configurar gráfico
            const ctx = document.getElementById('graficoAsesores').getContext('2d');
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: datosCombinados.map(a => a.nombre),
                    datasets: [{
                        label: 'Total Generado ($)',
                        data: datosCombinados.map(a => a.totalGenerado),
                        backgroundColor: '#8F5AF5'
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    },
                    plugins: {
                        legend: {
                            labels: { color: 'white' }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return `$${context.parsed.y.toLocaleString()}`;
                                }
                            }
                        }
                    }
                }
            });

            // 🔥 5. Llenar la tabla
            const tbody = document.querySelector("#tablaTotales tbody");
            datosCombinados.forEach(a => {
                const fila = `
                    <tr>
                        <td>${a.idAsesor}</td>
                        <td>${a.nombre}</td>
                        <td>$${a.totalGenerado.toFixed(2)}</td>
                    </tr>
                `;
                tbody.innerHTML += fila;
            });

        } catch (error) {
            console.error("Error al cargar el reporte:", error);
            Swal.fire("Error", "No se pudo cargar el reporte.", "error");
        }
    });
</script>
