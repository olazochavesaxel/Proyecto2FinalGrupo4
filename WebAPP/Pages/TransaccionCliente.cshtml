@page
@model WebAPP.Pages.TransaccionClienteModel
@{
    ViewData["Title"] = "Transacciones del Cliente";
    Layout = "~/Pages/Shared/ClienteLayout.cshtml";
}

<!-- ✅ jQuery, SweetAlert2 y DataTables -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css" />
<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>

<div class="content">
    <h1>Registrar Transacción</h1>
    <div class="form-box">
        <div class="form-group">
            <label for="monto">Monto:</label>
            <input type="number" id="monto" class="form-control" placeholder="Ingrese el monto"
                   step="0.01" min="0" pattern="^\d+(\.\d{1,2})?$" />
        </div>

        <div class="form-group">
            <label for="tipo">Tipo de transacción:</label>
            <select id="tipo" class="form-control">
                <option value="">Seleccione...</option>
                <option value="Compra">Compra</option>
                <option value="Venta">Venta</option>
                <option value="Retiro">Retiro</option>
            </select>
        </div>

        <div class="form-group">
            <label for="estado">Estado:</label>
            <select id="estado" class="form-control">
                <option value="Procesada">Procesada</option>
                <option value="Pendiente">Pendiente</option>
            </select>
        </div>

        <button id="btnRegistrar" class="btn-green">Registrar</button>
    </div>

    <h2 class="mt-5">Mis Transacciones</h2>
    <table id="tblTransacciones" class="display" style="width:100%">
        <thead>
            <tr>
                <th>ID</th>
                <th>Monto</th>
                <th>Tipo</th>
                <th>Estado</th>
                <th>Fecha</th>
            </tr>
        </thead>
    </table>
</div>

<style>
    body, html {
        background-color: black;
        color: white;
        margin: 0;
        padding: 0;
    }

    .content {
        flex: 1;
        margin-left: 220px;
        padding: 40px;
    }

    .form-box {
        background-color: #111;
        padding: 30px;
        border-radius: 15px;
        margin-bottom: 40px;
        box-shadow: 0 0 10px rgba(255, 255, 255, 0.1);
        max-width: 600px;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-control {
        width: 100%;
        padding: 10px;
        border-radius: 8px;
        border: none;
    }

    .btn-green {
        background: #00D395;
        color: black;
        padding: 10px 20px;
        border-radius: 8px;
        border: none;
        cursor: pointer;
        font-size: 16px;
        font-weight: bold;
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const usuarioData = sessionStorage.getItem("usuario");

        if (!usuarioData) {
            Swal.fire({
                icon: "warning",
                title: "Tu sesión ha sido cerrada",
                text: "Para ingresar nuevamente por favor inicia sesión.",
                confirmButtonColor: "#8F5AF5",
                backdrop: `rgba(0, 0, 0, 0.95)` // ✅ Fondo oscuro detrás del popup
            }).then(() => {
                window.location.href = "/Index";
            });
            return;
        }

        let user;
        try {
            user = JSON.parse(usuarioData);
        } catch (e) {
            sessionStorage.clear();
            Swal.fire({
                icon: "warning",
                title: "Sesión inválida",
                text: "Para ingresar nuevamente por favor inicia sesión.",
                confirmButtonColor: "#8F5AF5",
                backdrop: `rgba(0, 0, 0, 0.95)`
            }).then(() => {
                window.location.href = "/Index";
            });
            return;
        }

        cargarTransacciones();

        document.getElementById("btnRegistrar").addEventListener("click", async () => {
            const monto = parseFloat(document.getElementById("monto").value);
            const tipo = document.getElementById("tipo").value;
            const estado = document.getElementById("estado").value;

            if (user.rol.toLowerCase() !== "cliente") {
                Swal.fire("Error", "Solo los clientes pueden registrar transacciones.", "error");
                return;
            }

            if (!monto || !tipo || !estado) {
                Swal.fire("Campos incompletos", "Por favor complete todos los campos.", "warning");
                return;
            }

            if (monto < 0 || !/^\d+(\.\d{1,2})?$/.test(monto)) {
                Swal.fire("Monto inválido", "Por favor ingrese un monto válido con hasta 2 decimales.", "warning");
                return;
            }

            const trans = {
                monto,
                tipo,
                estado,
                idCliente: user.id
            };

            try {
                const res = await fetch("https://localhost:7057/api/transaccioncliente", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(trans)
                });

                const txt = await res.text();
                if (res.ok) {
                    Swal.fire("Éxito", txt, "success");
                    cargarTransacciones();
                } else {
                    Swal.fire("Error", txt, "error");
                }
            } catch (err) {
                Swal.fire("Error", "Hubo un error al conectar con el servidor.", "error");
                console.error(err);
            }
        });

        async function cargarTransacciones() {
            try {
                const res = await fetch("https://localhost:7057/api/transaccioncliente");
                const data = await res.json();

                const misTrans = data.filter(t => t.idCliente === user.id);

                $('#tblTransacciones').DataTable({
                    data: misTrans,
                    destroy: true,
                    columns: [
                        { data: "id" },
                        {
                            data: "monto",
                            render: function (data) {
                                return `$${parseFloat(data).toFixed(2)}`;
                            }
                        },
                        { data: "tipo" },
                        { data: "estado" },
                        {
                            data: "created",
                            render: function (data) {
                                return new Date(data).toLocaleString();
                            }
                        }
                    ]
                });

            } catch (err) {
                console.error("Error cargando transacciones", err);
            }
        }
    });
</script>
