@page
@model WebAPP.Pages.HistoricoPreciosClienteModel
@{
    ViewData["Title"] = "Histórico de Precios";
    Layout = "~/Pages/Shared/ClienteLayout.cshtml";
}

<div class="content">
    <h1>Histórico de Precios de Acciones</h1>

    <div class="selector">
        <label for="symbol">Selecciona una acción:</label>
        <input type="text" id="symbol" placeholder="Ejemplo: AAPL" />
        <button id="buscar" class="btn-buscar">Buscar</button>
    </div>

    <canvas id="graficoHistorico"></canvas>
</div>

<style>
    body, html {
        background-color: black;
        color: white;
        margin: 0;
        padding: 0;
    }

    .content {
        margin-left: 220px;
        padding: 40px;
    }

    .selector {
        margin-bottom: 30px;
    }

    .btn-buscar {
        background-color: #8F5AF5;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 8px;
        font-weight: bold;
        margin-left: 10px;
    }

    #graficoHistorico {
        background: #111;
        padding: 20px;
        border-radius: 15px;
    }
</style>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    document.getElementById("buscar").addEventListener("click", async () => {
        const symbol = document.getElementById("symbol").value.trim();

        if (!symbol) {
            Swal.fire("Error", "Por favor ingresa un símbolo.", "warning");
            return;
        }

        try {
            const today = new Date();
            const from = new Date();
            from.setMonth(today.getMonth() - 1); // Por defecto 1 mes atrás

            const response = await fetch(`https://localhost:7057/api/alpaca/Historico?symbol=${encodeURIComponent(symbol)}&from=${from.toISOString()}&to=${today.toISOString()}`);

            if (!response.ok) {
                throw new Error("No se pudo obtener el histórico.");
            }

            const data = await response.json();

            if (data.length === 0) {
                Swal.fire("Sin datos", "No hay datos de histórico para esta acción.", "info");
                return;
            }

            const labels = data.map(d => new Date(d.fecha).toLocaleDateString());
            const precios = data.map(d => d.cierre);

            // Destruir gráfico anterior si existe
            if (window.grafico) {
                window.grafico.destroy();
            }

            const ctx = document.getElementById("graficoHistorico").getContext("2d");
            window.grafico = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: `Precio de ${symbol.toUpperCase()}`,
                        data: precios,
                        borderColor: '#8F5AF5',
                        backgroundColor: 'rgba(143, 90, 245, 0.2)',
                        fill: true,
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: false
                        }
                    }
                }
            });

        } catch (error) {
            console.error(error);
            Swal.fire("Error", "Ocurrió un problema al buscar el histórico.", "error");
        }
    });
</script>
