@page
@model WebAPP.Pages.TransaccionAsesorModel
@{
    ViewData["Title"] = "Transacciones del Asesor";
    Layout = "~/Pages/Shared/AsesorLayout.cshtml";
}

<div class="profile-page">
    <div class="content">
        <h1>Registrar Transacción para Cliente</h1>
        <div class="profile-box">
            <form id="transaccionForm">
                <div class="form-group">
                    <label for="idCliente">Seleccionar Cliente</label>
                    <select id="idCliente" class="form-control" required></select>
                </div>

                <div class="form-group">
                    <label for="monto">Monto</label>
                    <input type="number" id="monto" class="form-control" step="0.01" required />
                </div>

                <div class="form-group">
                    <label for="tipo">Tipo</label>
                    <select id="tipo" class="form-control" required>
                        <option value="">Seleccione...</option>
                        <option value="Compra">Compra</option>
                        <option value="Venta">Venta</option>
                        <option value="Retiro">Retiro</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="estado">Estado</label>
                    <input type="text" id="estado" class="form-control" placeholder="Ej. Completado" required />
                </div>

                <button type="submit" class="btn-green">Registrar Transacción</button>
            </form>
        </div>
    </div>
</div>

<style>
    body, html {
        background-color: black;
        color: white;
    }

    .profile-page {
        display: flex;
        flex-direction: row;
        margin-top: 20px;
        justify-content: center;
    }

    .content {
        flex: 1;
        padding: 30px;
        max-width: 800px;
    }

    .profile-box {
        background-color: #111;
        padding: 30px;
        border-radius: 15px;
        box-shadow: 0 0 10px rgba(255, 255, 255, 0.1);
        margin: 0 auto;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-control {
        width: 100%;
        padding: 10px;
        border-radius: 8px;
        border: none;
    }

    .btn-green {
        background: #00D395;
        color: black;
        padding: 10px 20px;
        border-radius: 8px;
        border: none;
        cursor: pointer;
        width: 100%;
        font-size: 16px;
        font-weight: bold;
    }

        .btn-green:hover {
            background: #00FFB4;
        }
</style>

<script>
    document.addEventListener("DOMContentLoaded", async () => {
        const usuarioData = sessionStorage.getItem("usuario");

        if (!usuarioData) {
            Swal.fire({
                icon: "warning",
                title: "Tu sesión ha sido cerrada",
                text: "Para ingresar nuevamente por favor inicia sesión.",
                backdrop: `rgba(0, 0, 0, 0.95)`,
                confirmButtonColor: "#8F5AF5"
            }).then(() => {
                window.location.href = "/Index";
            });
            return;
        }

        let asesor;
        try {
            asesor = JSON.parse(usuarioData);
        } catch (e) {
            sessionStorage.clear();
            Swal.fire({
                icon: "warning",
                title: "Sesión inválida",
                text: "Para ingresar nuevamente por favor inicia sesión.",
                backdrop: `rgba(0, 0, 0, 0.95)`,
                confirmButtonColor: "#8F5AF5"
            }).then(() => {
                window.location.href = "/Index";
            });
            return;
        }

        await cargarClientesAsignados(asesor);
    });

    async function cargarClientesAsignados(asesor) {
        try {
            const res = await fetch(`https://localhost:7057/api/Cliente/Asignados/${asesor.id}`);
            if (!res.ok) throw new Error("No se pudieron obtener los clientes asignados.");

            const clientes = await res.json();
            const dropdown = document.getElementById("idCliente");
            dropdown.innerHTML = "";

            clientes.forEach(c => {
                const option = document.createElement("option");
                option.value = c.id;
                option.text = c.correo;
                dropdown.appendChild(option);
            });

        } catch (err) {
            console.error("Error al cargar clientes asignados:", err);
            Swal.fire("Error", "Error al cargar los clientes asignados.", "error");
        }
    }

    document.getElementById("transaccionForm").addEventListener("submit", async function (e) {
        e.preventDefault();

        const idCliente = parseInt(document.getElementById("idCliente").value);
        const idAsesor = JSON.parse(sessionStorage.getItem("usuario"))?.id;
        const monto = parseFloat(document.getElementById("monto").value);
        const tipo = document.getElementById("tipo").value;
        const estado = document.getElementById("estado").value;

        if (!idCliente || !idAsesor || !monto || !tipo || !estado) {
            Swal.fire("Campos incompletos", "Todos los campos son obligatorios.", "warning");
            return;
        }

        const transaccion = {
            idCliente,
            idAsesor,
            monto,
            tipo,
            estado
        };

        try {
            const response = await fetch("https://localhost:7057/api/TransaccionAsesor", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(transaccion)
            });

            if (response.ok) {
                Swal.fire("Éxito", "Transacción registrada correctamente.", "success");
                document.getElementById("transaccionForm").reset();
            } else {
                const error = await response.text();
                Swal.fire("Error", error, "error");
            }
        } catch (error) {
            Swal.fire("Error", "Error al conectar con la API.", "error");
            console.error(error);
        }
    });
</script>
